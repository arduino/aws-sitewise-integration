// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	context "context"

	iotsitewise "github.com/aws/aws-sdk-go-v2/service/iotsitewise"
	mock "github.com/stretchr/testify/mock"

	sitewiseclient "github.com/arduino/aws-sitewise-integration/internal/sitewiseclient"
)

// API is an autogenerated mock type for the API type
type API struct {
	mock.Mock
}

// CreateAsset provides a mock function with given fields: ctx, name, assetModelId, thingId
func (_m *API) CreateAsset(ctx context.Context, name string, assetModelId string, thingId string) (*iotsitewise.CreateAssetOutput, error) {
	ret := _m.Called(ctx, name, assetModelId, thingId)

	if len(ret) == 0 {
		panic("no return value specified for CreateAsset")
	}

	var r0 *iotsitewise.CreateAssetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*iotsitewise.CreateAssetOutput, error)); ok {
		return rf(ctx, name, assetModelId, thingId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *iotsitewise.CreateAssetOutput); ok {
		r0 = rf(ctx, name, assetModelId, thingId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iotsitewise.CreateAssetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, name, assetModelId, thingId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAssetModel provides a mock function with given fields: ctx, name, properties
func (_m *API) CreateAssetModel(ctx context.Context, name string, properties map[string]string) (*iotsitewise.CreateAssetModelOutput, error) {
	ret := _m.Called(ctx, name, properties)

	if len(ret) == 0 {
		panic("no return value specified for CreateAssetModel")
	}

	var r0 *iotsitewise.CreateAssetModelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]string) (*iotsitewise.CreateAssetModelOutput, error)); ok {
		return rf(ctx, name, properties)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]string) *iotsitewise.CreateAssetModelOutput); ok {
		r0 = rf(ctx, name, properties)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iotsitewise.CreateAssetModelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, map[string]string) error); ok {
		r1 = rf(ctx, name, properties)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDataBulkImportJob provides a mock function with given fields: ctx, jobNumber, bucket, filesToImport, roleArn
func (_m *API) CreateDataBulkImportJob(ctx context.Context, jobNumber int, bucket string, filesToImport []string, roleArn string) (*iotsitewise.CreateBulkImportJobOutput, error) {
	ret := _m.Called(ctx, jobNumber, bucket, filesToImport, roleArn)

	if len(ret) == 0 {
		panic("no return value specified for CreateDataBulkImportJob")
	}

	var r0 *iotsitewise.CreateBulkImportJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string, []string, string) (*iotsitewise.CreateBulkImportJobOutput, error)); ok {
		return rf(ctx, jobNumber, bucket, filesToImport, roleArn)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, string, []string, string) *iotsitewise.CreateBulkImportJobOutput); ok {
		r0 = rf(ctx, jobNumber, bucket, filesToImport, roleArn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iotsitewise.CreateBulkImportJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, string, []string, string) error); ok {
		r1 = rf(ctx, jobNumber, bucket, filesToImport, roleArn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAssetModel provides a mock function with given fields: ctx, assetModelId
func (_m *API) DeleteAssetModel(ctx context.Context, assetModelId *string) (*iotsitewise.DeleteAssetModelOutput, error) {
	ret := _m.Called(ctx, assetModelId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAssetModel")
	}

	var r0 *iotsitewise.DeleteAssetModelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *string) (*iotsitewise.DeleteAssetModelOutput, error)); ok {
		return rf(ctx, assetModelId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *string) *iotsitewise.DeleteAssetModelOutput); ok {
		r0 = rf(ctx, assetModelId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iotsitewise.DeleteAssetModelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *string) error); ok {
		r1 = rf(ctx, assetModelId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAsset provides a mock function with given fields: ctx, assetId
func (_m *API) DescribeAsset(ctx context.Context, assetId string) (*iotsitewise.DescribeAssetOutput, error) {
	ret := _m.Called(ctx, assetId)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAsset")
	}

	var r0 *iotsitewise.DescribeAssetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*iotsitewise.DescribeAssetOutput, error)); ok {
		return rf(ctx, assetId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *iotsitewise.DescribeAssetOutput); ok {
		r0 = rf(ctx, assetId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iotsitewise.DescribeAssetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, assetId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAssetModel provides a mock function with given fields: ctx, assetModelId
func (_m *API) DescribeAssetModel(ctx context.Context, assetModelId *string) (*iotsitewise.DescribeAssetModelOutput, error) {
	ret := _m.Called(ctx, assetModelId)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAssetModel")
	}

	var r0 *iotsitewise.DescribeAssetModelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *string) (*iotsitewise.DescribeAssetModelOutput, error)); ok {
		return rf(ctx, assetModelId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *string) *iotsitewise.DescribeAssetModelOutput); ok {
		r0 = rf(ctx, assetModelId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iotsitewise.DescribeAssetModelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *string) error); ok {
		r1 = rf(ctx, assetModelId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeModel provides a mock function with given fields: ctx, assetModelId
func (_m *API) DescribeModel(ctx context.Context, assetModelId string) (*iotsitewise.DescribeAssetModelOutput, error) {
	ret := _m.Called(ctx, assetModelId)

	if len(ret) == 0 {
		panic("no return value specified for DescribeModel")
	}

	var r0 *iotsitewise.DescribeAssetModelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*iotsitewise.DescribeAssetModelOutput, error)); ok {
		return rf(ctx, assetModelId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *iotsitewise.DescribeAssetModelOutput); ok {
		r0 = rf(ctx, assetModelId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iotsitewise.DescribeAssetModelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, assetModelId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBulkImportJobStatus provides a mock function with given fields: ctx, jobId
func (_m *API) GetBulkImportJobStatus(ctx context.Context, jobId *string) (*iotsitewise.DescribeBulkImportJobOutput, error) {
	ret := _m.Called(ctx, jobId)

	if len(ret) == 0 {
		panic("no return value specified for GetBulkImportJobStatus")
	}

	var r0 *iotsitewise.DescribeBulkImportJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *string) (*iotsitewise.DescribeBulkImportJobOutput, error)); ok {
		return rf(ctx, jobId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *string) *iotsitewise.DescribeBulkImportJobOutput); ok {
		r0 = rf(ctx, jobId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iotsitewise.DescribeBulkImportJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *string) error); ok {
		r1 = rf(ctx, jobId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsAssetActive provides a mock function with given fields: ctx, asset
func (_m *API) IsAssetActive(ctx context.Context, asset *iotsitewise.DescribeAssetOutput) bool {
	ret := _m.Called(ctx, asset)

	if len(ret) == 0 {
		panic("no return value specified for IsAssetActive")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, *iotsitewise.DescribeAssetOutput) bool); ok {
		r0 = rf(ctx, asset)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsModelActive provides a mock function with given fields: ctx, model
func (_m *API) IsModelActive(ctx context.Context, model *iotsitewise.DescribeAssetModelOutput) bool {
	ret := _m.Called(ctx, model)

	if len(ret) == 0 {
		panic("no return value specified for IsModelActive")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, *iotsitewise.DescribeAssetModelOutput) bool); ok {
		r0 = rf(ctx, model)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ListAssetModels provides a mock function with given fields: ctx, nextToken
func (_m *API) ListAssetModels(ctx context.Context, nextToken *string) (*iotsitewise.ListAssetModelsOutput, error) {
	ret := _m.Called(ctx, nextToken)

	if len(ret) == 0 {
		panic("no return value specified for ListAssetModels")
	}

	var r0 *iotsitewise.ListAssetModelsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *string) (*iotsitewise.ListAssetModelsOutput, error)); ok {
		return rf(ctx, nextToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *string) *iotsitewise.ListAssetModelsOutput); ok {
		r0 = rf(ctx, nextToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iotsitewise.ListAssetModelsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *string) error); ok {
		r1 = rf(ctx, nextToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAssets provides a mock function with given fields: ctx, assetModelId, nextToken
func (_m *API) ListAssets(ctx context.Context, assetModelId *string, nextToken *string) (*iotsitewise.ListAssetsOutput, error) {
	ret := _m.Called(ctx, assetModelId, nextToken)

	if len(ret) == 0 {
		panic("no return value specified for ListAssets")
	}

	var r0 *iotsitewise.ListAssetsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *string, *string) (*iotsitewise.ListAssetsOutput, error)); ok {
		return rf(ctx, assetModelId, nextToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *string, *string) *iotsitewise.ListAssetsOutput); ok {
		r0 = rf(ctx, assetModelId, nextToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iotsitewise.ListAssetsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *string, *string) error); ok {
		r1 = rf(ctx, assetModelId, nextToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBulkImportJobs provides a mock function with given fields: ctx, nextToken
func (_m *API) ListBulkImportJobs(ctx context.Context, nextToken *string) (*iotsitewise.ListBulkImportJobsOutput, error) {
	ret := _m.Called(ctx, nextToken)

	if len(ret) == 0 {
		panic("no return value specified for ListBulkImportJobs")
	}

	var r0 *iotsitewise.ListBulkImportJobsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *string) (*iotsitewise.ListBulkImportJobsOutput, error)); ok {
		return rf(ctx, nextToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *string) *iotsitewise.ListBulkImportJobsOutput); ok {
		r0 = rf(ctx, nextToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iotsitewise.ListBulkImportJobsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *string) error); ok {
		r1 = rf(ctx, nextToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PollForAssetActiveStatus provides a mock function with given fields: ctx, assetId, maxRetry
func (_m *API) PollForAssetActiveStatus(ctx context.Context, assetId string, maxRetry int) bool {
	ret := _m.Called(ctx, assetId, maxRetry)

	if len(ret) == 0 {
		panic("no return value specified for PollForAssetActiveStatus")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, int) bool); ok {
		r0 = rf(ctx, assetId, maxRetry)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// PollForModelActiveStatus provides a mock function with given fields: ctx, modelId, maxRetry
func (_m *API) PollForModelActiveStatus(ctx context.Context, modelId string, maxRetry int) bool {
	ret := _m.Called(ctx, modelId, maxRetry)

	if len(ret) == 0 {
		panic("no return value specified for PollForModelActiveStatus")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, int) bool); ok {
		r0 = rf(ctx, modelId, maxRetry)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// PopulateArbitrarySamplesByAlias provides a mock function with given fields: ctx, points
func (_m *API) PopulateArbitrarySamplesByAlias(ctx context.Context, points []sitewiseclient.DataPoint) error {
	ret := _m.Called(ctx, points)

	if len(ret) == 0 {
		panic("no return value specified for PopulateArbitrarySamplesByAlias")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []sitewiseclient.DataPoint) error); ok {
		r0 = rf(ctx, points)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PopulateSampledSamplesTimeSeriesByAlias provides a mock function with given fields: ctx, propertyAlias, ts, values
func (_m *API) PopulateSampledSamplesTimeSeriesByAlias(ctx context.Context, propertyAlias string, ts []int64, values []interface{}) error {
	ret := _m.Called(ctx, propertyAlias, ts, values)

	if len(ret) == 0 {
		panic("no return value specified for PopulateSampledSamplesTimeSeriesByAlias")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []int64, []interface{}) error); ok {
		r0 = rf(ctx, propertyAlias, ts, values)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PopulateTimeSeriesByAlias provides a mock function with given fields: ctx, propertyAlias, ts, values
func (_m *API) PopulateTimeSeriesByAlias(ctx context.Context, propertyAlias string, ts []int64, values []float64) error {
	ret := _m.Called(ctx, propertyAlias, ts, values)

	if len(ret) == 0 {
		panic("no return value specified for PopulateTimeSeriesByAlias")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []int64, []float64) error); ok {
		r0 = rf(ctx, propertyAlias, ts, values)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAssetModelProperties provides a mock function with given fields: ctx, assetModel, thingProperties
func (_m *API) UpdateAssetModelProperties(ctx context.Context, assetModel *iotsitewise.DescribeAssetModelOutput, thingProperties map[string]string) error {
	ret := _m.Called(ctx, assetModel, thingProperties)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAssetModelProperties")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *iotsitewise.DescribeAssetModelOutput, map[string]string) error); ok {
		r0 = rf(ctx, assetModel, thingProperties)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAssetProperties provides a mock function with given fields: ctx, assetId, thingProperties
func (_m *API) UpdateAssetProperties(ctx context.Context, assetId string, thingProperties map[string]string) error {
	ret := _m.Called(ctx, assetId, thingProperties)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAssetProperties")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]string) error); ok {
		r0 = rf(ctx, assetId, thingProperties)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAPI creates a new instance of API. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *API {
	mock := &API{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
